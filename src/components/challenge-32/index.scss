@import '../../common';

$white: #fbf6bc;
$blue: #8fdafb;
$black: #c3b8b4;
$red: #ff9e7b;
$green: #81d7a1;
$colorless: #ccc2c0;

// pentagon calculations
$sqrtTenPlus2sqrt5: 3.804;
$sqrtTenMinus2sqrt5: 2.351;
$sqrt5Plus1: 3.236;
$sqrt5Minus1: 1.236;
$c1: $sqrt5Minus1 / 4;
$c2: $sqrt5Plus1 / 4;
$s1: $sqrtTenPlus2sqrt5 / 4;
$s2: $sqrtTenMinus2sqrt5 / 4;

@mixin point($x, $y, $unit, $scale: 100) {
  // $x: x-coordinate in range [-1,1]
  // $y: y-coordinate in range [-1,1]
  // $unit: unit for display
  // convert $x to range [0,1] and multiply by 100#{$unit}
  // convert $y to range [0,1], invert (1 - $y), and multiply by 100#{$unit}
  left: range-scale($x) * $scale#{$unit};
  top: invert(range-scale($y)) * $scale#{$unit};
}

@mixin gradient-bg($color1, $color2: null, $color3: null, $color4: null, $color5: null, $angle: 90deg) {
  // creates a linear-gradient with hard stops equally distributed between each color (up to 5 colors)
  @if $color5 {
    background: linear-gradient(
      $angle,
      $color1 0%, $color1 20%,
      $color2 20%, $color2 40%,
      $color3 40%, $color3 60%,
      $color4 60%, $color4 80%,
      $color5 80%, $color5 100%);
  } @else if $color4 {
    background: linear-gradient(
      $angle,
      $color1 0%, $color1 25%,
      $color2 25%, $color2 50%,
      $color3 50%, $color3 75%,
      $color4 75%, $color4 100%);
  } @else if $color3 {
    background: linear-gradient(
      $angle,
      $color1 0%, $color1 33%,
      $color2 33%, $color2 66%,
      $color3 66%, $color3 100%);
  } @else if $color2 {
    background: linear-gradient(
      $angle,
      $color1 0%, $color1 50%,
      $color2 50%, $color2 100%);
  } @else {
    background-color: $color1;
  }
}

@mixin conic-bg($color1, $color2: null, $color3: null, $color4: null, $color5: null, $start: 0, $scale: 100, $at: 50% 50%) {
  // creates a conic-gradient with hard stops equally distributed between each color (up to 5 colors)
  @if $color5 {
    background: conic-gradient(
      from #{$start}turn,
      $color1 0%, $color1 ($scale / 5) * 1%,
      $color2 ($scale / 5) * 1%, $color2 (2 * $scale / 5) * 1%,
      $color3 (2 * $scale / 5) * 1%, $color3 (3 * $scale / 5) * 1%,
      $color4 (3 * $scale / 5) * 1%, $color4 (4 * $scale / 5) * 1%,
      $color5 (4 * $scale / 5) * 1%, $color5 $scale * 1%);
  } @else if $color4 {
    background: conic-gradient(
      from #{$start}turn at $at,
      $color1 0, $color1 ($scale / 4) * 1%,
      $color2 ($scale / 4) * 1%, $color2 (2 * $scale / 4) * 1%,
      $color3 (2 * $scale / 4) * 1%, $color3 (3 * $scale / 4) * 1%,
      $color4 (3 * $scale / 4) * 1%, $color4 $scale * 1%);
  } @else if $color3 {
    background: conic-gradient(
      from #{$start}turn,
      $color1 0%, $color1 ($scale / 3) * 1%,
      $color2 ($scale / 3) * 1%, $color2 (2 * $scale / 3) * 1%,
      $color3 (2 * $scale / 3) * 1%, $color3 $scale * 1%);
  } @else if $color2 {
    background: conic-gradient(
      from #{$start}turn,
      $color1 0%, $color1 ($scale / 2) * 1%,
      $color2 ($scale / 2) * 1%, $color2 $scale * 1%);
  } @else {
    background-color: $color1;
  }
}

:host {
  --app-drawer-width: 30vw;
}

paper-tooltip {
  z-index: 5000;
}

#menuButton {
  top: 1vh;
  right: 0;
  position: absolute;
  z-index: 5000;
  transition: right 200ms ease;
  border-color: black;
  border-style: solid;
  border-top-width: 1px;
  border-left-width: 1px;
  border-bottom-width: 1px;
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
  background-color: white;

  &.menu-open {
    right: var(--app-drawer-width);
  }
}

#menu {
  --app-drawer-content-container: {
    z-index: 5000;
  }

  --iron-icon: {
    border-radius: 50%;

    @apply --shadow-elevation-2dp;
  }

  z-index: 4000;
  text-align: initial;

  h2 {
    padding: 0 24px;

    &:first-child {
      margin-top: 16px;
    }
  }
}

.mana-symbol {
  border-color: black;
  border-style: solid;
  border-radius: 50%;
  position: absolute;
  user-select: none;
  z-index: 2;
}

.dot {
  border-color: black;
  border-style: solid;
  border-radius: 50%;
  position: absolute;
}

.white-mana,
.white-mana.deck .background {
  background-color: $white;

  &.deck {
    --mono-color-rotation: 0deg;
  }
}

.blue-mana,
.blue-mana.deck .background {
  background-color: $blue;

  &.deck {
    --mono-color-rotation: 72deg;
  }
}

.black-mana,
.black-mana.deck .background {
  background-color: $black;

  &.deck {
    --mono-color-rotation: 144deg;
  }
}

.red-mana,
.red-mana.deck .background {
  background-color: $red;

  &.deck {
    --mono-color-rotation: 216deg;
  }
}

.green-mana,
.green-mana.deck .background {
  background-color: $green;

  &.deck {
    --mono-color-rotation: 288deg;
  }
}

div.white-mana.deck,
div.blue-mana.deck,
div.black-mana.deck,
div.red-mana.deck,
div.green-mana.deck {
  background-color: black;
  clip-path: url(#petal);
  z-index: -1;

  .background,
  .border,
  .image {
    width: 100%;
    height: 100%;
    transform: scale(.95);
    clip-path: url(#petal);
  }

  .border {
    background-color: black;
  }

  .image {
    background-position: center top;
    background-size: cover;

    & + .image {
      clip-path: url(#halfPetal);
    }
  }
}

.colorless-mana {
  background-color: $colorless;

  &.deck {
    border-radius: 50%;
    border-style: solid;
    border-color: black;
    z-index: 2;

    .background,
    .image {
      width: 100%;
      height: 100%;
      transform: scale(.95);
      border-radius: 50%;
    }

    .background {
      background-color: black;
    }

    .image {
      background-position: center top;
      background-size: cover;

      & + .image {
        clip-path: polygon(50% 0, 100% 0, 100% 100%, 50% 100%);
      }
    }

    span {
      position: absolute;
      display: block;
      width: 100%;
      left: 0;
      top: 0;
    }
  }
}

#content {
  position: relative;
  transform: scale(.85);
  left: 5vh;
  top: 6vh;
}

.deck,
.image {
  position: absolute;
  cursor: pointer;
}

.ally,
.wedge {
  clip-path: polygon(0 0, 100% 0, 50% 100%);
  transform-origin: top left;

  .background,
  .border,
  .image {
    clip-path: polygon(0 0, 100% 0, 50% 100%);
  }
}

.shard {
  clip-path: polygon(0 100%, 50% 0, 100% 100%);
  transform-origin: top center;

  .background,
  .border,
  .image {
    clip-path: polygon(0 100%, 50% 0, 100% 100%);
  }

  .border,
  .image {
    transform-origin: 50% 70%;
  }
}

.enemy {
  clip-path: polygon(0 0, 100% 0, 63.85% 100%, 36.15% 100%);
  transform-origin: top left;

  .background,
  .border,
  .image {
    clip-path: polygon(0 0, 100% 0, 63.85% 100%, 36.15% 100%);
  }
}

.ally,
.wedge,
.shard,
.enemy,
.four-color,
.pentacolor {
  background-color: black;

  .background,
  .border,
  .image {
    width: 100%;
    height: 100%;
    transform: scale(.95);
  }

  .border {
    background-color: black;
    visibility: hidden;
  }

  .image {
    background-position: center top;
    background-size: cover;
  }
}

// Allied guilds
.azorius {
  transform: rotate(36deg);

  .background {
    @include gradient-bg($white, $blue);
  }
}

.dimir {
  transform: rotate(108deg);

  .background {
    @include gradient-bg($blue, $black);
  }
}

.rakdos {
  transform: rotate(180deg);

  .background {
    @include gradient-bg($black, $red);
  }
}

.gruul {
  transform: rotate(252deg);

  .background {
    @include gradient-bg($red, $green);
  }
}

.selesnya {
  transform: rotate(324deg);

  .background {
    @include gradient-bg($green, $white);
  }
}

.dimir,
.rakdos,
.gruul {
  .image {
    transform: scale(-.95);
    clip-path: polygon(0 100%, 100% 100%, 50% 0);
  }
}

// Khans wedges
.jeskai {
  transform: rotate(36deg) scaleY(-1);

  .background {
    @include gradient-bg($white, $red, $blue);
  }
}

.sultai {
  transform: rotate(108deg) scaleY(-1);

  .background {
    @include gradient-bg($blue, $green, $black);
  }
}

.mardu {
  transform: rotate(180deg) scaleY(-1);

  .background {
    @include gradient-bg($black, $white, $red);
  }
}

.temur {
  transform: rotate(252deg) scaleY(-1);

  .background {
    @include gradient-bg($red, $blue, $green);
  }
}

.abzan {
  transform: rotate(324deg) scaleY(-1);

  .background {
    @include gradient-bg($green, $black, $white);
  }
}

.jeskai,
.abzan {
  .image {
    transform: scale(.95, -.95);
    clip-path: polygon(0 100%, 100% 100%, 50% 0);

    & + .image {
      clip-path: polygon(50% 100%, 100% 100%, 50% 0);
    }
  }
}

.sultai,
.mardu,
.temur {
  .image {
    transform: scale(-.95, .95);

    & + .image {
      clip-path: polygon(50% 0, 100% 0, 50% 100%);
    }
  }
}

// Alara shards
.bant {
  transform: translate(var(--minus-shard-half-width), 0);

  .background {
    @include gradient-bg($green, $white, $blue);
  }
}

.esper {
  transform: translate(var(--minus-shard-half-width), 0) rotate(72deg);

  .background {
    @include gradient-bg($white, $blue, $black);
  }
}

.grixis {
  transform: translate(var(--minus-shard-half-width), 0) rotate(144deg);

  .background {
    @include gradient-bg($blue, $black, $red);
  }
}

.jund {
  transform: translate(var(--minus-shard-half-width), 0) rotate(216deg);

  .background {
    @include gradient-bg($black, $red, $green);
  }
}

.naya {
  transform: translate(var(--minus-shard-half-width), 0) rotate(288deg);

  .background {
    @include gradient-bg($red, $green, $white);
  }
}

.grixis,
.jund {
  .image {
    transform-origin: center 50.5%;
    transform: scale(-.95);
    clip-path: polygon(0 0, 50% 100%, 100% 0);

    & + .image {
      clip-path: polygon(50% 0, 50% 100%, 100% 0);
    }
  }
}

.bant,
.esper,
.naya {
  .image + .image {
    clip-path: polygon(50% 100%, 50% 0, 100% 100%);
  }
}

// Enemy guilds
.simic {
  .background {
    @include gradient-bg($green, $blue);
  }
}

.orzhov {
  transform: rotate(72deg);

  .background {
    @include gradient-bg($white, $black);
  }
}

.izzet {
  transform: rotate(144deg);

  .background {
    @include gradient-bg($blue, $red);
  }
}

.golgari {
  transform: rotate(216deg);

  .background {
    @include gradient-bg($black, $green);
  }
}

.boros {
  transform: rotate(288deg);

  .background {
    @include gradient-bg($red, $white);
  }
}

.izzet,
.golgari {
  .image {
    transform: scale(-.95);
    clip-path: polygon(0 100%, 100% 100%, 63.85% 0, 36.15% 0);

    & + .image {
      clip-path: polygon(50% 100%, 100% 100%, 63.85% 0, 50% 0);
    }
  }
}

.simic,
.orzhov,
.boros {
  .image + .image {
    clip-path: polygon(50% 0, 100% 0, 63.85% 100%, 50% 100%);
  }
}

// Other
.pentacolor {
  clip-path: polygon(
    range-scale(0) * 100% invert(range-scale(-1)) * 100%,
    range-scale(-$s1) * 100% invert(range-scale(-$c1)) * 100%,
    range-scale(-$s2) * 100% invert(range-scale($c2)) * 100%,
    range-scale($s2) * 100% invert(range-scale($c2)) * 100%,
    range-scale($s1) * 100% invert(range-scale(-$c1)) * 100%);

  .background,
  .border,
  .image {
    clip-path: polygon(
      range-scale(0) * 100% invert(range-scale(-1)) * 100%,
      range-scale(-$s1) * 100% invert(range-scale(-$c1)) * 100%,
      range-scale(-$s2) * 100% invert(range-scale($c2)) * 100%,
      range-scale($s2) * 100% invert(range-scale($c2)) * 100%,
      range-scale($s1) * 100% invert(range-scale(-$c1)) * 100%);
  }

  .background {
    background: conic-gradient($white, $blue, $black, $red, $green, $white);
  }
}

.four-color {
  clip-path: url(#petal);
  z-index: -2;

  .background,
  .border,
  .image {
    clip-path: url(#petal);

    & + .image {
      clip-path: url(#halfPetal);
    }
  }
}

.partner-separator {
  background-color: black;
  height: 100%;
  width: 1%;
  position: absolute;
  top: 0;
  left: 49.5%;
}

.landscape {
  // shape dimensions
  .ally,
  .wedge {
    // length of line between mono-colors
    width: 47.55vh;
    // 85% of the distance from midpoint of hypotenuse to 4C dot
    height: 14.683vh;
  }

  .shard {
    --minus-shard-half-width: -10.605vh;
    // distance between interior vertices of ally pair triangles
    width: 21.21vh;
    // ditance from midpoint between adjacent all pair triangles to shared mono-color
    height: 25.855vh;
  }

  .enemy {
    // width of shard triangles
    width: 21.21vh;
    // distance from base of shard tirangle to edge of pentacolor pentagon
    height: 10.55vh;
  }

  .pentacolor {
    width: 10vh;
    height: 10vh;
    top: 45vh;
    left: 45vh;
  }

  .four-color {
    --minus-4c-half-width: #{-(px(382.2 / 2))}vh;
    --minus-4c-half-height: #{-(px(382.2 / 2))}vh;
    width: px(382.2) * 1vh;
    height: px(382.2) * 1vh;
  }

  div.white-mana.deck,
  div.blue-mana.deck,
  div.black-mana.deck,
  div.red-mana.deck,
  div.green-mana.deck,
  div.colorless-mana.deck {
    width: px(382.2) * 1vh;
    height: px(382.2) * 1vh;
    transform: translate(#{-(px(382.2 / 2))}vh, #{-(px(382.2 / 2))}vh) rotate(var(--mono-color-rotation));
  }

  div.white-mana.deck {
    @include point(0, $c2, vh);
  }

  div.blue-mana.deck {
    @include point(($s1 - $s2) / 2 + $s2, $c2 - ($c1 + $c2) / 2, vh);
  }

  div.black-mana.deck {
    @include point($s1 / 2, ($c1 - 1) / 2 - $c1, vh);
  }

  div.red-mana.deck {
    @include point($s1 / 2 - $s1, ($c1 - 1) / 2 - $c1, vh);
  }

  div.green-mana.deck {
    @include point(($s1 - $s2) / 2 - $s1, $c2 - ($c1 + $c2) / 2, vh);
  }

  div.colorless-mana.deck {
    width: px(185.5) * 1vh;
    height: px(185.5) * 1vh;
    border-width: px(5) * 1vh;
    transform: translate(#{-(px(195.5) / 2)}vh, #{-(px(195.5) / 2)}vh);
    // @include point(($s1 - $s2) / 2 + $s2, -1, vh);
    @include point(-1, -1, vh);
  }

  // 4C combos
  .dot {
    width: px(20) * 1vh;
    height: px(20) * 1vh;
    border-width: px(5) * 1vh;
    transform: translate(-1 * px(15) * 1vh, -1 * px(15) * 1vh);
  }

  .whiteless {
    left: range-scale(0) * 100vh;
    top: invert(range-scale(-1)) * 100 - 3vh;

    &.deck {
      top: invert(range-scale(-1)) * 100 - 6vh;
      transform: translate(var(--minus-4c-half-width), var(--minus-4c-half-height)) rotate(180deg);

      .background {
        @include conic-bg($blue, $black, $red, $green, $start: -.34, $scale: 68, $at: 50% 41%);
      }
    }
  }

  .blueless {
    left: range-scale($s1 / 2 - $s1) * 100 - 21.311vh;
    top: invert(range-scale(($c1 - 1) / 2 - $c1)) * 100 - 18.073vh;

    &.deck {
      left: range-scale($s1 / 2 - $s1) * 100 - 18.458vh;
      top: invert(range-scale(($c1 - 1) / 2 - $c1)) * 100 - 19vh;
      transform: translate(var(--minus-4c-half-width), var(--minus-4c-half-height)) rotate(252deg);

      .background {
        @include conic-bg($black, $red, $green, $white, $start: -.34, $scale: 68, $at: 50% 41%);
      }
    }
  }

  .blackless {
    left: range-scale(($s1 - $s2) / 2 - $s1) * 100 + 10.603vh;
    top: invert(range-scale($c2 - ($c1 + $c2) / 2)) * 100 - 25.853vh;

    &.deck {
      left: range-scale(($s1 - $s2) / 2 - $s1) * 100 + 12.367vh;
      top: invert(range-scale($c2 - ($c1 + $c2) / 2)) * 100 - 23.426vh;
      transform: translate(var(--minus-4c-half-width), var(--minus-4c-half-height)) rotate(324deg);

      .background {
        @include conic-bg($red, $green, $white, $blue, $start: -.34, $scale: 68, $at: 50% 41%);
      }
    }
  }

  .redless {
    left: range-scale(0) * 100 + 27.864vh;
    top: invert(range-scale($c2)) * 100 + 2.095vh;

    &.deck {
      left: range-scale(0) * 100 + 26.101vh;
      top: invert(range-scale($c2)) * 100 + 4.523vh;
      transform: translate(var(--minus-4c-half-width), var(--minus-4c-half-height)) rotate(36deg);

      .background {
        @include conic-bg($green, $white, $blue, $black, $start: -.34, $scale: 68, $at: 50% 41%);
      }
    }
  }

  .greenless {
    left: range-scale(($s1 - $s2) / 2 + $s2) * 100 + 6.618vh;
    top: invert(range-scale($c2 - ($c1 + $c2) / 2)) * 100 + 27.148vh;

    &.deck {
      left: range-scale(($s1 - $s2) / 2 + $s2) * 100 + 3.765vh;
      top: invert(range-scale($c2 - ($c1 + $c2) / 2)) * 100 + 26.221vh;
      transform: translate(var(--minus-4c-half-width), var(--minus-4c-half-height)) rotate(108deg);

      .background {
        @include conic-bg($white, $blue, $black, $red, $start: -.34, $scale: 68, $at: 50% 41%);
      }
    }
  }

  // Allied guilds
  .azorius {
    @include point(0, $c2, vh);
  }

  .dimir {
    @include point(($s1 - $s2) / 2 + $s2, $c2 - ($c1 + $c2) / 2, vh);
  }

  .rakdos {
    @include point($s1 / 2, ($c1 - 1) / 2 - $c1, vh);
  }

  .gruul {
    @include point($s1 / 2 - $s1, ($c1 - 1) / 2 - $c1, vh);
  }

  .selesnya {
    @include point(($s1 - $s2) / 2 - $s1, $c2 - ($c1 + $c2) / 2, vh);
  }

  // Enemy guilds
  .simic {
    // bottom-left corner of bant triangle
    left: 39.394vh;
    top: 35.405vh;
  }

  .orzhov {
    // bottom-right corner of bant triangle
    left: 60.604vh;
    top: 35.405vh;
  }

  .izzet {
    // corner shared by esper, dimir, and grixis
    left: 67.158vh;
    top: 55.576vh;
  }

  .golgari {
    // corner shared by grixis, rakdos, and jund
    left: 50.019vh;
    top: 68.043vh;
  }

  .boros {
    // corner shared by jund, gruul, and naya
    left: 32.86vh;
    top: 55.576vh;
  }

  // Khans wedges
  .jeskai {
    @include point(0, $c2, vh);
  }

  .sultai {
    @include point(($s1 - $s2) / 2 + $s2, $c2 - ($c1 + $c2) / 2, vh);
  }

  .mardu {
    @include point($s1 / 2, ($c1 - 1) / 2 - $c1, vh);
  }

  .temur {
    @include point($s1 / 2 - $s1, ($c1 - 1) / 2 - $c1, vh);
  }

  .abzan {
    @include point(($s1 - $s2) / 2 - $s1, $c2 - ($c1 + $c2) / 2, vh);
  }

  // Alara shards
  .bant {
    @include point(0, $c2, vh);
  }

  .esper {
    @include point(($s1 - $s2) / 2 + $s2, $c2 - ($c1 + $c2) / 2, vh);
  }

  .grixis {
    @include point($s1 / 2, ($c1 - 1) / 2 - $c1, vh);
  }

  .jund {
    @include point($s1 / 2 - $s1, ($c1 - 1) / 2 - $c1, vh);
  }

  .naya {
    @include point(($s1 - $s2) / 2 - $s1, $c2 - ($c1 + $c2) / 2, vh);
  }

  .mana-symbol {
    width: px(67.5) * 1vh;
    height: px(67.5) * 1vh;
    padding: px(5) * 1vh;
    border-width: px(5) * 1vh;
    transform: translate(#{-(px(87.5) / 2)}vh, #{-(px(87.5) / 2)}vh);

    &.background {
      transform: translate(-6.555vh, -6.555vh) scale(2);
    }

    &.white-mana {
      // midpoint between blackless and redless
      @include point(0, $c2, vh);
    }

    &.blue-mana {
      // midpoint between redless and greenless
      @include point(($s1 - $s2) / 2 + $s2, $c2 - ($c1 + $c2) / 2, vh);
    }

    &.black-mana {
      // midpoint between greenless and whiteless
      @include point($s1 / 2, ($c1 - 1) / 2 - $c1, vh);
    }

    &.red-mana {
      // midpoint between whiteless and blueless
      @include point($s1 / 2 - $s1, ($c1 - 1) / 2 - $c1, vh);
    }

    &.green-mana {
      // midpoint between blueless and blackless
      @include point(($s1 - $s2) / 2 - $s1, $c2 - ($c1 + $c2) / 2, vh);
    }

    &.colorless-mana {
      // horizontal same as blue
      // vertical equal to whiteless
      // @include point(($s1 - $s2) / 2 + $s2, -1, vh);
      @include point(-1, -1, vh);
      width: px(175.5) * 1vh;
      height: px(175.5) * 1vh;
      transform: translate(#{-(px(195.5) / 2)}vh, #{-(px(195.5) / 2)}vh);
    }
  }
}

.portrait {
  .mana-symbol {
    &.white-mana {
      left: calc(50vw - 35px);
      top: 0;
    }

    &.blue-mana {
      left: calc(100vw - 70px);
      top: calc(33.754vw + 35px)
    }

    &.black-mana {
      left: calc(81.243vw - 35px);
      top: calc(100vw - 70px);
    }

    &.red-mana {
      left: calc(18.757vw + 35px);
      top: calc(100vw - 70px);
    }

    &.green-mana {
      left: 0;
      top: calc(33.754vh + 35px);
    }
  }
}
